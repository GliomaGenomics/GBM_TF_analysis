library(ggplot2)
library(argparse)
install.packages('argparse')
library(argparse)
parser <- ArgumentParser(description='Plot PCA')
parser$add_argument('--patients')
q()
q()
args$patients<-"patient_lists/gbm_idhwt_rt_tmz_local.txt"
args<-''
args$patients<-"patient_lists/gbm_idhwt_rt_tmz_local.txt"
args$genes<-gene_lists/JARID2_bound_genes.txt
args$genes<-"gene_lists/JARID2_bound_genes.txt"
args$table<-"tables/log2fc_all.txt"
args$name<-"gbm_idhwt_rt_tmz_local_JARID2_log2fc_all"
library(ggplot2)
library(argparse)
patients<-scan(args$patients, what = character())
genes<-scan(args$genes, what = character())
datain<-read.table(args$table, header=TRUE, row.names=1)
datain=datain[ , as.vector(patients) ]
datain=t(datain)
cn<-colnames(datain)
colnames(datain)<-substr(cn,1,15)
meta<-read.delim(args$scale, col.names=c('patient_id','value'))
meta<-meta[match(as.vector(patients), meta$patient_id),]
args$scale<-"reports/outputs_actual/JARID2_results.tsv"
meta<-read.delim(args$scale, col.names=c('patient_id','value'))
meta<-meta[match(as.vector(patients), meta$patient_id),]
if( !exists("args$genes") )
{
filter<-intersect(genes,colnames(datain))
datain=datain[ , filter]
}
pca<- prcomp(datain, center = TRUE, scale = TRUE)
save(pca,file=(paste("analysis/pca/pca_",args$name,".RData", sep=""))
pdf(paste("analysis/pca/pca_",args$name,".pdf", sep=""))
save(pca,file=(paste("analysis/pca/pca_",args$name,".RData", sep="")))
pdf(paste("analysis/pca/pca_",args$name,".pdf", sep=""))
pdf(paste("analysis/pca/pca_",args$name,".pdf", sep=""))
screeplot(pca, type = "l", npcs = 15, main = "Screeplot of the first 10 PCs")
legend("topright", legend=c("Eigenvalue = 1"),
       col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(pca$sdev^2 / sum(pca$sdev^2))
plot(cumpro[0:15], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 6, col="blue", lty=5)
abline(h = 0.88759, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
       col=c("blue"), lty=5, cex=0.6)
plot(pca$x[,1],pca$x[,2], xlab="PC1", ylab = "PC2", main = "PC1 / PC2 - plot")
plot(pca$x[,3],pca$x[,4], xlab="PC3", ylab = "PC4", main = "PC3 / PC4 - plot")
plot(pca$x[,5],pca$x[,6], xlab="PC5", ylab = "PC6", main = "PC5 / PC6 - plot")
ggplot(as.data.frame(pca$x), aes(x=pca$x[,1], y=pca$x[,2])) +
  theme_classic() +
  geom_point(aes(color = meta$values), size = 2.88, alpha=5/6) +
  scale_colour_gradient(low = "blue", high = "yellow")
ggplot(as.data.frame(pca$x), aes(x=pca$x[,1], y=pca$x[,1])) +
  theme_classic() +
  geom_point(aes(color = meta$values), size = 2.88, alpha=5/6) +
  scale_colour_gradient(low = "blue", high = "yellow")
ggplot(as.data.frame(pca$x), aes(x=pca$x[,3], y=pca$x[,4])) +
  theme_classic() +
  geom_point(aes(color = meta$values), size = 2.88, alpha=5/6) +
  scale_colour_gradient(low = "blue", high = "yellow")
ggplot(as.data.frame(pca$x), aes(x=pca$x[,5], y=pca$x[,6])) +
  theme_classic() +
  geom_point(aes(color = meta$values), size = 2.88, alpha=5/6) +
  scale_colour_gradient(low = "blue", high = "yellow")
dev.off()
meta$values
meta
q()
meta<-read.delim("reports/outputs_actual/JARID2_results.tsv", col.names=c('patient_id','value'))
meta
meta<-read.delim("reports/outputs_actual/JARID2_results.tsv", col.names=c('patient_id','value'), header=FALSE)
meta
q()
